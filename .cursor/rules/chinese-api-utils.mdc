# 中文 API 和工具函数开发指南

## API 接口定义
在 `src/api/` 目录下定义中文注释的 API 接口：

```javascript
// src/api/user.js
import request from '@/utils/request'

/**
 * 用户登录
 * @param {Object} data - 登录数据
 * @param {string} data.username - 用户名
 * @param {string} data.password - 密码
 * @returns {Promise} 登录结果
 */
export function login(data) {
  return request({
    url: '/user/login',
    method: 'post',
    data
  })
}

/**
 * 获取用户信息
 * @param {string} token - 用户令牌
 * @returns {Promise} 用户信息
 */
export function getUserInfo(token) {
  return request({
    url: '/user/info',
    method: 'get',
    params: { token }
  })
}

/**
 * 用户登出
 * @returns {Promise} 登出结果
 */
export function logout() {
  return request({
    url: '/user/logout',
    method: 'post'
  })
}
```

## 请求拦截器配置
在 [request.js](mdc:base-aiflow/src/utils/request.js) 中配置中文错误处理：

```javascript
// 响应拦截器
service.interceptors.response.use(
  response => {
    const res = response.data

    // 如果自定义状态码不是 20000，则判断为错误
    if (res.code !== 20000) {
      Message({
        message: res.message || '请求失败',
        type: 'error',
        duration: 5 * 1000
      })

      // 50008: 非法令牌; 50012: 其他客户端登录; 50014: 令牌过期;
      if (res.code === 50008 || res.code === 50012 || res.code === 50014) {
        // 重新登录
        MessageBox.confirm('您已被登出，可以取消继续留在该页面，或者重新登录', '确认登出', {
          confirmButtonText: '重新登录',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          store.dispatch('user/resetToken').then(() => {
            location.reload()
          })
        })
      }
      return Promise.reject(new Error(res.message || '请求失败'))
    } else {
      return res
    }
  },
  error => {
    console.log('请求错误：' + error)
    Message({
      message: error.message || '网络错误',
      type: 'error',
      duration: 5 * 1000
    })
    return Promise.reject(error)
  }
)
```

## 工具函数
在 `src/utils/` 目录下定义中文注释的工具函数：

```javascript
// src/utils/auth.js
import Cookies from 'js-cookie'

const TokenKey = 'Admin-Token'

/**
 * 获取令牌
 * @returns {string} 用户令牌
 */
export function getToken() {
  return Cookies.get(TokenKey)
}

/**
 * 设置令牌
 * @param {string} token - 用户令牌
 * @returns {string} 设置的令牌
 */
export function setToken(token) {
  return Cookies.set(TokenKey, token)
}

/**
 * 移除令牌
 * @returns {string} 移除的令牌
 */
export function removeToken() {
  return Cookies.remove(TokenKey)
}
```

## 验证工具函数
```javascript
// src/utils/validate.js

/**
 * 验证邮箱地址
 * @param {string} email - 邮箱地址
 * @returns {boolean} 是否为有效邮箱
 */
export function isValidEmail(email) {
  const reg = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
  return reg.test(email)
}

/**
 * 验证手机号码
 * @param {string} phone - 手机号码
 * @returns {boolean} 是否为有效手机号
 */
export function isValidPhone(phone) {
  const reg = /^1[3-9]\d{9}$/
  return reg.test(phone)
}

/**
 * 验证身份证号码
 * @param {string} idCard - 身份证号码
 * @returns {boolean} 是否为有效身份证号
 */
export function isValidIdCard(idCard) {
  const reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/
  return reg.test(idCard)
}
```

## 通用工具函数
```javascript
// src/utils/index.js

/**
 * 格式化日期
 * @param {Date|string} date - 日期对象或日期字符串
 * @param {string} format - 格式化模式
 * @returns {string} 格式化后的日期字符串
 */
export function formatDate(date, format = 'YYYY-MM-DD HH:mm:ss') {
  const d = new Date(date)
  const year = d.getFullYear()
  const month = String(d.getMonth() + 1).padStart(2, '0')
  const day = String(d.getDate()).padStart(2, '0')
  const hours = String(d.getHours()).padStart(2, '0')
  const minutes = String(d.getMinutes()).padStart(2, '0')
  const seconds = String(d.getSeconds()).padStart(2, '0')

  return format
    .replace('YYYY', year)
    .replace('MM', month)
    .replace('DD', day)
    .replace('HH', hours)
    .replace('mm', minutes)
    .replace('ss', seconds)
}

/**
 * 深拷贝对象
 * @param {Object} obj - 要拷贝的对象
 * @returns {Object} 拷贝后的对象
 */
export function deepClone(obj) {
  if (obj === null || typeof obj !== 'object') return obj
  if (obj instanceof Date) return new Date(obj.getTime())
  if (obj instanceof Array) return obj.map(item => deepClone(item))
  if (typeof obj === 'object') {
    const clonedObj = {}
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        clonedObj[key] = deepClone(obj[key])
      }
    }
    return clonedObj
  }
}

/**
 * 防抖函数
 * @param {Function} func - 要防抖的函数
 * @param {number} wait - 等待时间（毫秒）
 * @returns {Function} 防抖后的函数
 */
export function debounce(func, wait) {
  let timeout
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout)
      func(...args)
    }
    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}
```

## Mock 数据配置
```javascript
// mock/user.js
export default [
  {
    url: '/user/login',
    type: 'post',
    response: config => {
      const { username } = JSON.parse(config.body)
      const token = 'admin-token'
      if (username === 'admin') {
        return {
          code: 20000,
          data: { token },
          message: '登录成功'
        }
      } else {
        return {
          code: 60204,
          message: '用户名或密码错误'
        }
      }
    }
  }
]
```
description:
globs:
alwaysApply: false
---
